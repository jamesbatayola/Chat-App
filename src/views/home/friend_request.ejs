<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Document</title>
	</head>
	<body>
		<div class="container">
			<div class="content">
				<h1>Friend Request</h1>
				<input class="my-id" type="text" hidden value="<%= my_id %>" />

				<hr />

				<h3>Added you</h3>

				<div class="pending-container add-you-container">
					<% if(addedYou.length <= 0) { %>

					<div class="user-request-container null-placeholder">
						<p>No one added you</p>
					</div>

					<% } else { %> <% addedYou.forEach(each => { %>

					<div class="user-request-container add-you <%= each.id %>">
						<div class="credential request-username"><%= each.username %></div>
						<div class="credential request-userid">#<%= each.id %></div>
						<button class="button accept-button">Accept</button>
					</div>

					<% }) %> <% } %>
				</div>

				<hr />

				<h3>Pending</h3>

				<div class="pending-container you-add-container">
					<% if(pendingAdded.length <= 0) { %>

					<div class="user-request-container null-placeholder">
						<p>You added no one</p>
					</div>

					<% } else { %> <% pendingAdded.forEach(each => { %>

					<div class="user-request-container you-add">
						<div class="credential request-username"><%= each.username %></div>
						<div class="credential request-userid">#<%= each.id %></div>
						<button class="button cancel-button">Cancel</button>
					</div>

					<% }) %> <% } %>
				</div>
			</div>
		</div>
	</body>
</html>

<script type="module">
	const youadd_container = document.querySelector(".you-add-container");
	const addyou_container = document.querySelector(".add-you-container");
	const my_id = document.querySelector(".my-id");

	const cancel_buttons = document.querySelectorAll(".cancel-button");
	cancel_buttons.forEach((btn) => {
		btn.addEventListener("click", async (ev) => {
			ev.preventDefault();

			const pending_user_id = ev.target.parentElement.children[1].textContent.substring(1);

			const cancel_request_result = await fetch("http://localhost:7000/addfriend-cancel", {
				method: "POST",
				headers: {
					"content-type": "application/json",
				},
				body: JSON.stringify({
					pending_user_id: pending_user_id,
				}),
			});

			const data = await cancel_request_result.json();

			if (data.status === "success") {
				if (youadd_container.children.length === 1) {
					youadd_container.innerHTML = `
							<div class="user-request-container">
								<p>You added no one</p>
							</div>
						`;
				} else {
					ev.target.parentElement.remove();
				}
			}
		});
	});

	// ----- WEB SOCKET ----- //
	const ws = new WebSocket(`ws://localhost:7000`);

	console.log(addyou_container.querySelector(`[class~="2BA5"]`));

	ws.onmessage = (ev) => {
		const json_data = JSON.parse(ev.data);

		const from = json_data.from;
		const recipient = json_data.recipient;

		if (recipient.id === my_id.value) {
			//
			if (json_data.type === "addfriend") {
				//
				if (addyou_container.firstElementChild?.classList.contains("null-placeholder")) {
					addyou_container.firstElementChild.remove();
				}

				const div = document.createElement("div");

				div.innerHTML = `
						<div class="user-request-container add-you ${from.id}">
							<div class="credential request-username">${from.username}</div>
							<div class="credential request-userid">#${from.id}</div>
							<button class="button accept-button">Accept</button>
						</div>
					`;

				addyou_container.append(div);

				return;
			}

			if (json_data.type === "cancel_request") {
				//
				if (addyou_container.children.length === 1) {
					addyou_container.innerHTML = `
						<div class="user-request-container null-placeholder">
							<p>No one added you</p>
						</div>
					`;

					return;
				}

				addyou_container.querySelector(`[class~="${from.id}"]`).remove();

				return;
			}
		}
	};
</script>

<style>
	*,
	body {
		padding: 0;
		margin: 0;
		box-sizing: border-box;
	}

	.container {
		border: 1px solid black;
		display: grid;
		place-items: center;
		height: 100vh;
	}

	.content {
		border: 1px solid black;
		width: 450px;
		padding: 0.7rem;
		border-radius: 0.5rem;
	}

	h1 {
		padding-bottom: 0.4rem;
	}

	.credential {
		display: grid;
		place-items: center;
	}

	button {
		padding: 5px;
	}

	button {
		margin-left: auto;
	}

	.pending-container {
		min-height: 50px;
		display: flex;
		flex-direction: column;
		gap: 4px;
	}

	.pending-container:first-of-type {
		/* border-bottom: 1px solid gray; */
		padding-bottom: 12px;
	}

	.user-request-container {
		border: 1px solid gray;
		border-radius: 5px;
		padding: 7px 5px;
		display: flex;
		gap: 0.5rem;
	}

	.request-userid {
		color: rgb(174, 174, 174);
	}
</style>
